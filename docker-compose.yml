version: "3.9"
services:
#  app:
#    build:
#      args:
#        GITHUB_TOKEN: "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"
#      dockerfile: Dockerfile
#      context: .
#    environment:
#      PUSPEKNUBIKA_SQL_WRITE_HOST: "db"
#    ports:
#      - '8081:8081'
#    depends_on:
#      db:
#        condition: service_started
#      minio:
#        condition: service_started
#    links:
#      - db
#      - minio
#    restart: on-failure
#    networks:
#      - backend

  clickhouse:
    image: clickhouse/clickhouse-server:23.7
    restart: on-failure
    environment:
      CLICKHOUSE_DB: uptrace
    healthcheck:
      test: [ 'CMD', 'wget', '--spider', '-q', 'localhost:8123/ping' ]
      interval: 1s
      timeout: 1s
      retries: 30
    volumes:
      - ~/clickhouse:/var/lib/clickhouse
    ports:
      - '8123:8123'
      - '9002:9000'

  postgres:
    image: postgres:latest
    restart: on-failure
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: uptrace
      POSTGRES_PASSWORD: uptrace
      POSTGRES_DB: uptrace
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U uptrace -d uptrace' ]
      interval: 1s
      timeout: 1s
      retries: 30
    volumes:
      - '~/pg_data:/var/lib/postgresql/data/pgdata'
    ports:
      - '5432:5432'

  uptrace:
    image: 'uptrace/uptrace:1.6.0'
    #image: 'uptrace/uptrace-dev:latest'
    restart: on-failure
    volumes:
      - ./config/uptrace.yml:/etc/uptrace/uptrace.yml
    #environment:
    #  - DEBUG=2
    ports:
      - '14317:14317'
      - '14318:14318'

  otelcol:
    image: otel/opentelemetry-collector-contrib:0.88.0
    restart: on-failure
    volumes:
      - ./config/otel-collector.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - '4317:4317'
      - '4318:4318'
    extra_hosts:
      - 'host.docker.internal:host-gateway'

  mailhog:
    image: mailhog/mailhog:v1.0.1
    restart: on-failure
    ports:
      - '8025:8025'

  vector:
    image: timberio/vector:0.28.X-alpine
    volumes:
      - ./config/vector.toml:/etc/vector/vector.toml:ro

  grafana:
    image: grafana/grafana:9.5.3
    restart: on-failure
    volumes:
      - ./config/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./config/grafana/custom.ini:/etc/grafana/grafana.ini
    ports:
      - '3000:3000'
    extra_hosts:
      - 'host.docker.internal:host-gateway'

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./config/prometheus/:/etc/prometheus/
      - ~/prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    extra_hosts:
      - 'host.docker.internal:host-gateway'

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    network_mode: host
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'

  db:
    image: mysql:latest
    restart: on-failure
    environment:
      MYSQL_ROOT_PASSWORD: "password"
      MYSQL_DATABASE: "puspeknubika"
      MYSQL_USER: "app_user"
      MYSQL_PASSWORD: "superuser"
    ports:
      - "3306:3306"
    expose:
      - '3306'
    volumes:
      - ~/data:/var/lib/mysql
    networks:
      - backend

  mongo:
    image: mongo:latest
    restart: on-failure
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
    ports:
      - '27017:27017'
    expose:
      - '27017'
    volumes:
      - ~/mongo_data:/data/db
    networks:
      - backend

  minio:
    image: quay.io/minio/minio
    command: server /data --console-address ":9001"
    restart: on-failure
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_DEFAULT_BUCKETS=puspeknubika
    volumes:
      - ~/minio_data:/data
    ports:
      - 9000:9000
      - 9001:9001
    expose:
      - '9000'
      - '9001'
    networks:
      - backend

networks:
  backend:
    external: true

volumes:
  db:
    driver: local